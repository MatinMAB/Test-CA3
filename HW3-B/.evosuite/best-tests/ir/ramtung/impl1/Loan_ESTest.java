/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 10 09:36:43 GMT 2024
 */

package ir.ramtung.impl1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl1.Book;
import ir.ramtung.impl1.Document;
import ir.ramtung.impl1.Loan;
import ir.ramtung.impl1.Magazine;
import ir.ramtung.impl1.Member;
import ir.ramtung.impl1.Professor;
import ir.ramtung.impl1.Reference;
import ir.ramtung.impl1.Student;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Loan_ESTest extends Loan_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Professor professor0 = new Professor("<6qW%A!v=^_");
      Magazine magazine0 = new Magazine("<6qW%A!v=^_", 1254, 1254);
      Loan loan0 = new Loan(professor0, magazine0, 1254);
      loan0.dueDate = 1254;
      int int0 = loan0.getPenalty(1254);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Professor professor0 = new Professor("Invalid argument to loan constructor");
      Book book0 = new Book("Invalid argument to loan constructor");
      Loan loan0 = new Loan(professor0, book0, 3685);
      loan0.dueDate = (-2841);
      loan0.return_((-2841));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Student student0 = new Student("3'flv/1!Q &M", "3'flv/1!Q &M");
      Book book0 = new Book("3'flv/1!Q &M");
      Loan loan0 = new Loan(student0, book0, 1277);
      try { 
        loan0.extend(1297);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend a late loan
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Student student0 = new Student("Cannot extend on the same day borrowed", "Cannot extend on the same day borrowed");
      Book book0 = new Book("Cannot extend on the same day borrowed");
      Loan loan0 = new Loan(student0, book0, 7);
      int int0 = loan0.getPenalty(254);
      assertEquals(1136000, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Student student0 = new Student("ir.ramtung.impl1.Book", "ir.ramtung.impl1.Book");
      Reference reference0 = new Reference("Empty student ID is not allowed");
      Loan loan0 = new Loan(student0, reference0, 0);
      int int0 = loan0.getPenalty(2217000);
      assertEquals((-1799989888), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Professor professor0 = new Professor("}T");
      Reference reference0 = new Reference("}T");
      Loan loan0 = new Loan(professor0, reference0, 1253);
      loan0.extend(1076);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Student student0 = new Student("ir.ramtung.impl1.Book", "ir.ramtung.impl1.Book");
      Reference reference0 = new Reference("Empty student ID is not allowed");
      Loan loan0 = new Loan(student0, reference0, 0);
      int int0 = loan0.getPenalty((-2337));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Student student0 = new Student("ir.ramtung.impl1.Book", "ir.ramtung.impl1.Book");
      Reference reference0 = new Reference("Empty student ID is not allowed");
      Loan loan0 = new Loan(student0, reference0, 0);
      loan0.return_(456);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Student student0 = new Student("ir.ramtung.impl1.Book", "ir.ramtung.impl1.Book");
      Reference reference0 = new Reference("Empty student ID is not allowed");
      Loan loan0 = new Loan(student0, reference0, 0);
      loan0.return_((-2337));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Professor professor0 = new Professor("<6qW%A!v=^_");
      Magazine magazine0 = new Magazine("<6qW%A!v=^_", 1254, 1254);
      Loan loan0 = new Loan(professor0, magazine0, 1254);
      try { 
        loan0.extend(1254);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend on the same day borrowed
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Professor professor0 = new Professor("<6qW%A!v=^_");
      Magazine magazine0 = new Magazine("<6qW%A!v=^_", 1254, 1254);
      Loan loan0 = new Loan(professor0, magazine0, 1254);
      boolean boolean0 = loan0.isBy(professor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Professor professor0 = new Professor("<6qW%A!v=^_");
      Magazine magazine0 = new Magazine("<6qW%A!v=^_", 1254, 1254);
      Loan loan0 = new Loan(professor0, magazine0, 1254);
      boolean boolean0 = loan0.isBy((Member) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Professor professor0 = new Professor("<6qW%A!v=^_");
      Magazine magazine0 = new Magazine("<6qW%A!v=^_", 1254, 1254);
      Loan loan0 = new Loan(professor0, magazine0, 1254);
      Reference reference0 = new Reference("<6qW%A!v=^_");
      boolean boolean0 = loan0.isFor(reference0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Student student0 = new Student("2KM *wqX1p?v", "2KM *wqX1p?v");
      Loan loan0 = null;
      try {
        loan0 = new Loan(student0, (Document) null, 304);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Professor professor0 = new Professor(" M0hYmrA'|ktQ2pO~|/");
      Reference reference0 = new Reference(" M0hYmrA'|ktQ2pO~|/");
      Loan loan0 = new Loan(professor0, reference0, (-63));
      boolean boolean0 = loan0.isFor(reference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reference reference0 = new Reference("ir.ramtung.impl1.Document");
      Loan loan0 = null;
      try {
        loan0 = new Loan((Member) null, reference0, 1115);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }
}
