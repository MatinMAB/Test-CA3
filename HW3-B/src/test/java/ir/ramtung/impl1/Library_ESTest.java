/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 10 07:38:38 GMT 2024
 */

package ir.ramtung.impl1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl1.Library;
import ir.ramtung.impl1.Member;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Library_ESTest extends Library_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.addBook("C;i=%2", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Negative or zero copies of a document cannot be added
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Library library0 = new Library();
      library0.timePass(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 2044);
      library0.addProfMember("G36]tPfxxC");
      library0.borrow("G36]tPfxxC", (String) null);
      library0.returnDocument("G36]tPfxxC", (String) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.returnDocument("G36]tPfxxC", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The document is not in member's loan
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.extend("", "Document is not available to borrow");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The document is not in member's loan
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Library library0 = new Library();
      library0.addMagazine("{-j0edy-'.SG3_Jg>w0", 1, 1, 1554);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.getLoanDueDate("E)_Z<wO_m2JEm[Z", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loan not found for the member and document specified
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Library library0 = new Library();
      library0.addProfMember((String) null);
      library0.addReference((String) null, 1468);
      library0.borrow((String) null, (String) null);
      library0.timePass(5);
      library0.extend((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Library library0 = new Library();
      library0.addProfMember((String) null);
      library0.addReference((String) null, 1495);
      library0.borrow((String) null, (String) null);
      library0.timePass(2362);
      int int0 = library0.getTotalPenalty((String) null);
      assertEquals(11722000, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 2000);
      library0.addProfMember("~h");
      library0.borrow("~h", (String) null);
      library0.timePass(10);
      int int0 = library0.getTotalPenalty("~h");
      assertEquals((-38000), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 2044);
      library0.addProfMember("G36]tPfxxC");
      library0.borrow("G36]tPfxxC", (String) null);
      library0.members = null;
      // Undeclared exception!
      try { 
        library0.returnDocument((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Library library0 = new Library();
      library0.members = null;
      // Undeclared exception!
      try { 
        library0.getTotalPenalty("`gJ`EW|v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 1);
      library0.addStudentMember((String) null, (String) null);
      library0.borrow((String) null, (String) null);
      library0.members = null;
      // Undeclared exception!
      try { 
        library0.getLoanDueDate((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 2176);
      LinkedList<Member> linkedList0 = new LinkedList<Member>();
      library0.members = (List<Member>) linkedList0;
      linkedList0.add((Member) null);
      // Undeclared exception!
      try { 
        library0.borrow((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Library library0 = new Library();
      library0.members = null;
      // Undeclared exception!
      try { 
        library0.addStudentMember("Empty student ID is not allowed", "Empty student ID is not allowed");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.addStudentMember("", "ir.ramtung.impl1.Document");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Empty student ID is not allowed
         //
         verifyException("ir.ramtung.impl1.Student", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Library library0 = new Library();
      library0.members = null;
      // Undeclared exception!
      try { 
        library0.addProfMember("2E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.addMagazine("", 0, 1, 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Documents with empty title are not allowed
         //
         verifyException("ir.ramtung.impl1.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference("31C*])U(*jMQdMah|Zv", 14000);
      try { 
        library0.addBook("31C*])U(*jMQdMah|Zv", 1957);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Document with the same title exists
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Library library0 = new Library();
      library0.addProfMember((String) null);
      try { 
        library0.addProfMember((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Member with the same name exists
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Library library0 = new Library();
      library0.addMagazine("Negative or zero copies of a document cannot be added", 1, 1, 1);
      try { 
        library0.addReference("Negative or zero copies of a document cannot be added", 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Document with the same title exists
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.addReference("r\"--iSG*", (-3460));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Negative or zero copies of a document cannot be added
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 2000);
      library0.addProfMember("~h");
      library0.addStudentMember((String) null, (String) null);
      library0.borrow("~h", (String) null);
      library0.borrow((String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 2000);
      library0.addProfMember("~h");
      library0.borrow("~h", (String) null);
      try { 
        library0.extend("~h", "~h");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The document is not in member's loan
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 2000);
      library0.addProfMember("~h");
      library0.borrow("~h", (String) null);
      try { 
        library0.returnDocument((String) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The document is not in member's loan
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 2000);
      library0.addProfMember("~h");
      library0.borrow("~h", (String) null);
      int int0 = library0.getTotalPenalty("~h");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 2000);
      library0.addProfMember("~h");
      library0.addStudentMember((String) null, (String) null);
      library0.borrow("~h", (String) null);
      int int0 = library0.getTotalPenalty((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.timePass((-78));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot go back in time
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.getTotalPenalty("Cannot< find meXmber");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find member
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Library library0 = new Library();
      library0.addMagazine("Negative or zero copies of a document cannot be added", 1, 1, 1);
      library0.addStudentMember("Negative or zero copies of a document cannot be added", "Negative or zero copies of a document cannot be added");
      library0.borrow("Negative or zero copies of a document cannot be added", "Negative or zero copies of a document cannot be added");
      List<String> list0 = library0.availableTitles();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 6);
      library0.addStudentMember((String) null, (String) null);
      library0.borrow((String) null, (String) null);
      library0.borrow((String) null, (String) null);
      try { 
        library0.borrow((String) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot borrow more documents
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 1);
      library0.addStudentMember((String) null, (String) null);
      library0.borrow((String) null, (String) null);
      try { 
        library0.borrow((String) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Document is not available to borrow
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 2194);
      try { 
        library0.borrow((String) null, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find member to borrow
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.borrow("/>V2/jS2X{;", "/>V2/jS2X{;");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot find document to borrow
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Library library0 = new Library();
      try { 
        library0.getDocumentLoanDuration((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Document not found
         //
         verifyException("ir.ramtung.impl1.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference("Cannot< find meXmber", 130);
      int int0 = library0.getDocumentLoanDuration("Cannot< find meXmber");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Library library0 = new Library();
      library0.addReference((String) null, 1);
      library0.addStudentMember((String) null, (String) null);
      library0.borrow((String) null, (String) null);
      int int0 = library0.getLoanDueDate((String) null, (String) null);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Library library0 = new Library();
      library0.addMagazine("Negative or zero copies of a document cannot be added", 1, 1, 1);
      List<String> list0 = library0.availableTitles();
      assertTrue(list0.contains("Negative or zero copies of a document cannot be added"));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook("eza PJ$40;o1", 2000);
  }
}
